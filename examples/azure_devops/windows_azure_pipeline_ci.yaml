name: $(Build.DefinitionName)_$(Date:yyyyMMdd)$(Rev:_r)

# will disable CI builds
trigger: none 
# will disable PR builds
pr: none 

variables:
  AgentPool: 'Default'

stages:
- stage: Pre_Req_installation
  displayName: Install Python Dependencies and create Artifact directory
  jobs:
  - job: InstallDependencies
    pool: $(AgentPool)
    displayName: Create Artifacts Folder and Installing dependencies
    workspace:
      clean: all
    steps:
    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        script: |
          echo "Create $(ArtifactsFolder) directory on $(System.DefaultWorkingDirectory)"
          mkdir "$(ArtifactsFolder)"
        workingDirectory: $(System.DefaultWorkingDirectory)
      displayName: Create Artifacts Folder

    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        script: |
          echo "Install Virtual Environment package"
          pip install -q -I virtualenv --user
        workingDirectory: $(System.DefaultWorkingDirectory)
      displayName: Install virtual environment
      
    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        script: |
          echo "Create $(PythonEnvName) Virtual Environment"
          python -m venv $(PythonEnvName) --clear
        workingDirectory: $(System.DefaultWorkingDirectory)
      displayName: Create $(PythonEnvName) Virtual Environment and activate it

    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        script: |
          echo "Switch to $(PythonEnvName) Virtual Environment"
          $(PythonEnvName)\bin\activate
          echo "Installing wheel Package"
          pip install -U wheel
          echo "Install OutSystems Pipeline Package"
          pip install -U outsystems-pipeline
          echo "Leave $(PythonEnvName) Virtual Environment for now"
          $(PythonEnvName)\bin\deactivate
        workingDirectory: $(System.DefaultWorkingDirectory)
      displayName: Install OutSystems Pipeline Package
      
  - job: DeployToRegression
    displayName: Deploy latest apps to the Regression environment
    dependsOn: InstallDependencies
    pool: $(AgentPool)
    steps:
    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        script: |
          echo "Switch to $(PythonEnvName) Virtual Environment"
          $(PythonEnvName)\bin\activate

          echo "Fetch LifeTime data"
          python -m outsystems.pipeline.fetch_lifetime_data --artifacts "$(ArtifactsFolder)" --lt_url $(LTURL) \
            --lt_token $(LTToken) --lt_api_version $(LTAPIVersion)
          $status_code = $LASTEXITCODE

          echo "Leave $(PythonEnvName) Virtual Environment for now"
          $(PythonEnvName)\bin\deactivate

          echo "Stashing the *.cache generated in the pipeline logs"
          $cache_files = Get-ChildItem -Path "$PWD\$(ArtifactsFolder)\*.cache"
          
          foreach ($cfile in $cache_files) {
            echo "Stashing $cfile"
            echo "##vso[task.uploadfile]$cfile"
          }

          exit $status_code
        workingDirectory: $(System.DefaultWorkingDirectory)
      displayName: Fetch LifeTime data
    
    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        script: |
          echo "Switch to $(PythonEnvName) Virtual Environment"
          $(PythonEnvName)\bin\activate

          echo "Deploy $(ApplicationScopeWithTests) to $(DstEnv)"
          python3 -m outsystems.pipeline.deploy_latest_tags_to_target_env --artifacts "$(ArtifactsFolder)" --lt_url $(LTURL) \
            --lt_token $(LTToken) --lt_api_version $(LTAPIVersion) --source_env "$(SrcEnv)" --destination_env "$(DstEnv)" \
            --app_list "$(ApplicationScopeWithTests)" --deploy_msg "$(DeployMsg)"
          $status_code = $LASTEXITCODE

          echo "Leave the Virtual Environment for now"
          $(PythonEnvName)\bin\deactivate

          echo "Stashing the *.cache generated in the pipeline logs"
          $cache_files = Get-ChildItem -Path "$PWD\$(ArtifactsFolder)\*.cache" -Recurse
          foreach ($cfile in $cache_files) {
            echo "Stashing $cfile"
            echo "##vso[task.uploadfile]$cfile"
          }

          $conflicts_file = Get-ChildItem -Path $PWD\$(ArtifactsFolder)\DeploymentConflicts
          if(Test-Path $conflicts_file) {
            echo "Stashing $conflicts_file"
            echo "##vso[task.uploadfile]$conflicts_file"
          }
        
          exit $status_code
        workingDirectory: $(System.DefaultWorkingDirectory)
      displayName: Deploy apps to $(DstEnv)

  - job: RunRegressionTests
    displayName: Run tests on the Regression Environment
    dependsOn: DeployToRegression
    pool: $(AgentPool)
    steps:
    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        script: | 
          echo "Switch to $(PythonEnvName) Virtual Environment"
          $(PythonEnvName)\bin\activate

          python -m outsystems.pipeline.generate_unit_testing_assembly --artifacts "$(ArtifactsFolder)" --app_list "$(ApplicationScopeWithTests)" \
            --cicd_probe_env $(CICDProbeURL) --bdd_framework_env $(BDDFrameworkURL)
          $status_code = $LASTEXITCODE
          
          echo "Leave the Virtual Environment for now"
          $(PythonEnvName)\bin\deactivate

          echo "Stashing the *.cache generated in the pipeline logs"
          $cache_files = Get-ChildItem -Path "$PWD\$(ArtifactsFolder)\*.cache" -Recurse
          foreach ($cfile in $cache_files) {
            echo "Stashing $cfile"
            echo "##vso[task.uploadfile]$cfile"
          }

          exit $status_code
        workingDirectory: $(System.DefaultWorkingDirectory)
      displayName: Generate BDD URLs for testing

    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        script: | 
          echo "Switch to $(PythonEnvName) Virtual Environment"
          $(PythonEnvName)\bin\activate

          python -m outsystems.pipeline.evaluate_test_results --artifacts "$(ArtifactsFolder)"
          $status_code = $LASTEXITCODE

          echo "Leave the Virtual Environment for now"
          $(PythonEnvName)\bin\deactivate
          
          exit $status_code
        workingDirectory: $(System.DefaultWorkingDirectory)
      displayName: Evaluate Test Results
    
    - task: PublishTestResults@2
      name: PublishTestResults
      inputs:
        testResultsFormat: JUnit
        testResultsFiles: "*.xml"
        searchFolder: $(System.DefaultWorkingDirectory)/$(ArtifactsFolder)
        failTaskOnFailedTests: true
        mergeTestResults: true
        testRunTitle: BDD Test Results
      displayName: Publish Regression JUnit test results
  
  - job: PublishArtifact
    displayName: Publish Artifacts used to deploy to Regression
    dependsOn: RunRegressionTests
    pool: $(AgentPool)
    steps:
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: $(System.DefaultWorkingDirectory)/$(ArtifactsFolder)/application_data
        ArtifactName: artifacts_ci