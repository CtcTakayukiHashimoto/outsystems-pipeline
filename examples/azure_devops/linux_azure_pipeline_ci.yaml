name: $(Build.DefinitionName)_$(Date:yyyyMMdd)$(Rev:_r)

# will disable CI builds
trigger: none 
# will disable PR builds
pr: none 

variables:
  AgentPool: 'Default'

stages:
- stage: Pre_Req_installation
  displayName: Install Python Dependencies and create Artifact directory
  jobs:
  - job: InstallDependencies
    pool: $(AgentPool)
    displayName: Create Artifacts Folder and Installing dependencies
    workspace:
      clean: all
    steps:
    - script: |
        echo "Create $(ArtifactsFolder) directory on $(System.DefaultWorkingDirectory)"
        mkdir "$(ArtifactsFolder)"
      displayName: Create Artifacts Folder
      workingDirectory: $(System.DefaultWorkingDirectory)

    - script: |
        echo "Install Virtual Environment package"
        pip3 install -q -I virtualenv
      displayName: Install virtual environment
      workingDirectory: $(System.DefaultWorkingDirectory)

    - script: |
        echo "Create $(PythonEnvName) Virtual Environment"
        python3 -m venv $(PythonEnvName) --clear
      displayName: Create $(PythonEnvName) Virtual Environment and activate it
      workingDirectory: $(System.DefaultWorkingDirectory)

    - script: |
        echo "Switch to $(PythonEnvName) Virtual Environment"
        source $(PythonEnvName)/bin/activate

        echo "Installing wheel Package"
        pip3 install -U wheel
        echo "Install OutSystems Pipeline Package"
        pip3 install -U outsystems-pipeline

        echo "Leave $(PythonEnvName) Virtual Environment for now"
        deactivate
      displayName: Install OutSystems Pipeline Package
      workingDirectory: $(System.DefaultWorkingDirectory)
      
  - job: DeployToRegression
    displayName: Deploy latest apps to the Regression environment
    dependsOn: InstallDependencies
    pool: $(AgentPool)
    steps:
    - script: |
        echo "Switch to $(PythonEnvName) Virtual Environment"
        source $(PythonEnvName)/bin/activate

        echo "Fetch LifeTime data"
        python3 -m outsystems.pipeline.fetch_lifetime_data --artifacts "$(ArtifactsFolder)" --lt_url $(LTURL) \
          --lt_token $(LTToken) --lt_api_version $(LTAPIVersion)
        status=$?

        echo "Leave $(PythonEnvName) Virtual Environment for now"
        deactivate

        echo "Stashing the *.cache generated in the pipeline logs"
        cache_files=$PWD/$(ArtifactsFolder)/*.cache
        for cfile in $cache_files
        do
          if test -f "$cfile"; then
            echo "Stashing $cfile"
            echo "##vso[task.uploadfile]$cfile"
          fi
        done

        exit $status
      displayName: Fetch LifeTime data
      workingDirectory: $(System.DefaultWorkingDirectory)
    
    - script: |
        echo "Switch to $(PythonEnvName) Virtual Environment"
        source $(PythonEnvName)/bin/activate

        echo "Deploy $(ApplicationScopeWithTests) to $(DstEnv)"
        python3 -m outsystems.pipeline.deploy_latest_tags_to_target_env --artifacts "$(ArtifactsFolder)" --lt_url $(LTURL) \
          --lt_token $(LTToken) --lt_api_version $(LTAPIVersion) --source_env "$(SrcEnv)" --destination_env "$(DstEnv)" \
          --app_list "$(ApplicationScopeWithTests)" --deploy_msg "$(DeployMsg)"
        status=$?

        echo "Leave the Virtual Environment for now"
        deactivate

        echo "Stashing the *.cache generated in the pipeline logs"
        cache_files=$PWD/$(ArtifactsFolder)/**/*.cache
        for cfile in $cache_files
        do
          if test -f "$cfile"; then
            echo "Stashing $cfile"
            echo "##vso[task.uploadfile]$cfile"
          fi
        done

        cache_files=$PWD/$(ArtifactsFolder)/*.cache
        for cfile in $cache_files
        do
          if test -f "$cfile"; then
            echo "Stashing $cfile"
            echo "##vso[task.uploadfile]$cfile"
          fi
        done

        conflicts_file=$PWD/$(ArtifactsFolder)/DeploymentConflicts
        if test -f "$conflicts_file"; then
          echo "Stashing $conflicts_file"
          echo "##vso[task.uploadfile]$conflicts_file"
        fi

        exit $status
      displayName: Deploy apps to $(DstEnv)
      workingDirectory: $(System.DefaultWorkingDirectory)

  - job: RunRegressionTests
    displayName: Run tests on the Regression Environment
    dependsOn: DeployToRegression
    pool: $(AgentPool)
    steps:
    - script: |
        echo "Switch to $(PythonEnvName) Virtual Environment"
        source $(PythonEnvName)/bin/activate

        python3 -m outsystems.pipeline.generate_unit_testing_assembly --artifacts "$(ArtifactsFolder)" --app_list "$(ApplicationScopeWithTests)" \
          --cicd_probe_env $(CICDProbeURL) --bdd_framework_env $(BDDFrameworkURL)
        status=$?

        echo "Leave the Virtual Environment for now"
        deactivate

        echo "Stashing the *.cache generated in the pipeline logs"
        cache_files=$PWD/$(ArtifactsFolder)/**/*.cache
        for cfile in $cache_files
        do
          echo "Stashing $cfile"
          echo "##vso[task.uploadfile]$cfile"
        done

        exit $status
      displayName: Generate BDD URLs for testing
      workingDirectory: $(System.DefaultWorkingDirectory)

    - script: |
        echo "Switch to $(PythonEnvName) Virtual Environment"
        source $(PythonEnvName)/bin/activate

        python3 -m outsystems.pipeline.evaluate_test_results --artifacts "$(ArtifactsFolder)"
        status=$?

        echo "Leave the Virtual Environment for now"
        deactivate

        exit $status
      displayName: Evaluate Test Results
      workingDirectory: $(System.DefaultWorkingDirectory)
    
    - task: PublishTestResults@2
      name: PublishTestResults
      inputs:
        testResultsFormat: JUnit
        testResultsFiles: "*.xml"
        searchFolder: $(System.DefaultWorkingDirectory)/$(ArtifactsFolder)
        failTaskOnFailedTests: true
        mergeTestResults: true
        testRunTitle: BDD Test Results
      displayName: Publish Regression JUnit test results
  
  - job: PublishArtifact
    displayName: Publish Artifacts used to deploy to Regression
    dependsOn: RunRegressionTests
    pool: $(AgentPool)
    steps:
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: $(System.DefaultWorkingDirectory)/$(ArtifactsFolder)/application_data
        ArtifactName: artifacts_ci