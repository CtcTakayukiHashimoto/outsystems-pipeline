# Python Modules
import xunitparser, json, os, requests, sys, argparse

# Workaround for Jenkins:
# Set the path to include the outsystems module
# Jenkins exposes the workspace directory through env.
if "WORKSPACE" in os.environ:
  sys.path.append(os.environ['WORKSPACE'])
else: # Else just add the project dir
  sys.path.append(os.getcwd())

# Custom Modules
# Variables
from outsystems.vars.file_vars import ARTIFACT_FOLDER, JUNIT_TEST_RESULTS_FILE

############################################################## SCRIPT ##############################################################
def main(artifact_dir :str, slack_hook :str, slack_channels :list, job_name :str, job_url :str):
  filename = os.path.join(artifact_dir, JUNIT_TEST_RESULTS_FILE)
  _, tr = xunitparser.parse(open(filename))

  message = "*{}* BDD tests run.\n*{}* errors found.".format(tr.testsRun, len(tr.failures))
  # Add test report url
  message += "\n\nGo here for full test report: {}\n\n".format(job_url)

  if len(tr.failures) > 0:
    message += "\nIt failed on the following tests:\n"
    for failure in tr.failures:
      test_name = "{}".format(failure[0])
      test_name = test_name.split('test_')[1] # cuts the test_ part since it's generated by junit
      message += "*{}*\n".format(test_name)

  for channel in slack_channels:
    # Build slack post
    postData = {
      "channel": channel,
      "username": "Jenkins Regression Testing",
      "text": "*Test Results for {}:*".format(job_name),
      "icon_emoji": ":jenkins:",
      "attachments": [{
        "color": "#49C39E" if len(tr.failures) == 0 else "#D40E0D",
        "text": message,
        "mrkdwn_in": ["text"]
      }]
    }
    response = requests.post(slack_hook, json.dumps(postData), None)
    if response.status_code == 200:
      print("Message sent to slack channel {} successfully...".format(channel))
    else: 
      print("Error sending notification to slack channel {}: {}".format(channel, response.text))

# End of main()

if __name__ == "__main__":
  # Argument menu / parsing
  parser = argparse.ArgumentParser()
  parser.add_argument("-a", "--artifacts", type=str, help="Name of the artifacts folder. Default: \"Artifacts\"")
  parser.add_argument("--slack_hook", type=str, help="Slack hook URL for API calls. Example: \"https://hooks.slack.com/services/<id>/<id>/<id>\"")
  parser.add_argument("--slack_channel", type=str, help="Comma separeted list with slack channel names. Example: \"Channel1,Channel-2\"")
  parser.add_argument("--job_name", type=str, help="Name of the Job that will show up on the notification.")
  parser.add_argument("--job_dashboard_url", type=str, help="URL for the run dashboard that will show up on the notification.")
  args = parser.parse_args()
  # Parse the artifact directory
  # Assumes the default dir = Artifacts
  artifact_dir = ARTIFACT_FOLDER
  if args.artifacts: artifact_dir = args.artifacts
  # Parse Slack Hook
  slack_hook = args.slack_hook
  # Parse Slack Channel list
  slack_channels = args.slack_channel.split(',')
  # Parse Job Name
  job_name = args.job_name
  # Parse Job Dashboard URL
  job_url = args.job_dashboard_url
  # Calls the main script
  main(artifact_dir, slack_hook, slack_channels, job_name, job_url)