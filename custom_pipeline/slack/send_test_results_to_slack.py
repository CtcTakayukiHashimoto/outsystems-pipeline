# Python Modules
import xunitparser
import json
import os
import requests
import sys

# Workaround for Jenkins:
# Set the path to include the outsystems module
# Jenkins exposes the workspace directory through env.
if "WORKSPACE" in os.environ:
  sys.path.append(os.environ['WORKSPACE'])

# Custom Modules
from outsystems.vars.file_vars import ARTIFACT_FOLDER, JUNIT_TEST_RESULTS_FILE

# Set script local variables from environment
# List of apps to deploy
apps = os.environ['JOB_NAME']
# Slack hook
slack_hook = os.environ['SlackHook']
# Slack channel
slack_channels = os.environ['SlackChannel'].split(',')
# Jenkins BlueOcean URL
jenkins_tests_url = os.environ['RUN_DISPLAY_URL']

filename = "{}\\{}".format(ARTIFACT_FOLDER, JUNIT_TEST_RESULTS_FILE)
ts, tr = xunitparser.parse(open(filename))

message = "*{}* BDD tests run.\n*{}* errors found.".format(tr.testsRun,len(tr.failures))
# Add test report url
message += "\n\nGo here for full test report: {}\n\n".format(jenkins_tests_url)

if len(tr.failures) > 0:
  message += "\nIt failed on the following tests:\n"
  for failure in tr.failures:
    test_name = "{}".format(failure[0])
    test_name = test_name.split('test_')[1] # cuts the test_ part since it's generated by junit
    message += "*{}*\n".format(test_name)

for channel in slack_channels:
  # Build slack post
  postData = {
    "channel": channel,
    "username": "Jenkins Regression Testing",
    "text": "*Test Results for {}:*".format(apps),
    "icon_emoji": ":jenkins:",
    "attachments": [{
      "color": "#49C39E" if len(tr.failures) == 0 else "#D40E0D",
      "text": message,
      "mrkdwn_in": ["text"]
    }]
  }
  response = requests.post(slack_hook, json.dumps(postData), None)
  if response.status_code == 200:
    print("Message sent to slack channel {} successfully...".format(channel))
  else: 
    print("Error sending notification to slack channel {}: {}".format(channel, response.text))
